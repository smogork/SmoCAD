#version 440 core

layout (quads, equal_spacing, ccw) in;

struct MVP
{
    mat4 Model;
    mat4 View;
    mat4 Projection;
};

uniform MVP u_MVP;

///////////////////////////////////////////////////
// function to evaluate  the Bezier curve
vec4 bezier(float t, vec4[4] array)
{
    int size = 3;

    //algorytm de castaljeu
    for (int h = 0; h < size; ++h)
    for (int i = 0; i < size - h;  i++)
    array[i] = (1.0f - t) * array[i] + t * array[i + 1];

    return vec4(array[0].xyz, 1.0f);
}

vec4[4] loadControlPoints(int idx, vec4[16] inArray)
{
    vec4 outArray[4];
    for (int i = 0; i < 4; ++i)
    outArray[i] = gl_in[idx + i].gl_Position;

    return outArray;
}

vec4[16] gregory_to_bernstein(float u, float v, vec4[20] gregoryPoints)
{
    vec4 bernsteinPoints[16];

    //Przepisanie zewnetrznych punktow
    for (int i = 0; i <= 4; ++i)
        bernsteinPoints[i] = gregoryPoints[i];
    bernsteinPoints[7] = gregoryPoints[9];
    bernsteinPoints[8] = gregoryPoints[10];
    for (int i = 11; i <= 15; ++i)
        bernsteinPoints[i] = gregoryPoints[i + 4];

    //Wyznaczenie wewnetrznych punktow
    bernsteinPoints[5] = (u * gregoryPoints[6] + v * gregoryPoints[5]) / (u + v + 1e-6);
    bernsteinPoints[6] = ((1 - u) * gregoryPoints[7] + v * gregoryPoints[8] ) / (1 - u + v+ 1e-6);
    bernsteinPoints[7] = ((1 - u) * gregoryPoints[13] + (1 - v) * gregoryPoints[14]) / (2 - u - v + 1e-6);
    bernsteinPoints[8] = (u * gregoryPoints[12] + (1 - v) * gregoryPoints[11]) / (1 + u - v + 1e-6);

    return bernsteinPoints;
}

void main()
{
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    vec4 midValue[4];
    vec4 controlPoints[4];
    vec4 inData[20];
    for (int i = 0; i < 20; ++i)
    inData[i] = gl_in[i].gl_Position;

    vec4[16] bernsteinPoints = gregory_to_bernstein(u, v, inData);

    controlPoints = loadControlPoints(0, bernsteinPoints);
    midValue[0] = bezier(u, controlPoints);
    controlPoints = loadControlPoints(4, bernsteinPoints);
    midValue[1] = bezier(u, controlPoints);
    controlPoints = loadControlPoints(8, bernsteinPoints);
    midValue[2] = bezier(u, controlPoints);
    controlPoints = loadControlPoints(12, bernsteinPoints);
    midValue[3] = bezier(u, controlPoints);

    vec4 pos = bezier(v, midValue);
    gl_Position = u_MVP.Projection * u_MVP.View * u_MVP.Model * pos;
}
